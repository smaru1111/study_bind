import { useEffect, useState } from 'react'
import {
  DndContext,
  DragOverlay,
  closestCorners,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragOverEvent,
  DragEndEvent,
  DragStartEvent,
} from '@dnd-kit/core'

import { arrayMove, sortableKeyboardCoordinates } from '@dnd-kit/sortable'
import Item from './components/Item'
import SortableContainer from './components/SortableContainer'
import './App.css'
import { Todos, Todo } from './types'

function App() {
  const [items, setItems] = useState<Todos>({
    yet: [],
    doing: [],
    done: [],
  })

  //„É™„Çπ„Éà„ÅÆ„É™„ÇΩ„Éº„ÇπidÔºà„É™„Çπ„Éà„ÅÆÂÄ§Ôºâ
  const [activeId, setActiveId] = useState<number | string | undefined>(undefined)

  // „Éâ„É©„ÉÉ„Ç∞„ÅÆÈñãÂßã„ÄÅÁßªÂãï„ÄÅÁµÇ‰∫Ü„Å™„Å©„Å´„Å©„ÅÆ„Çà„ÅÜ„Å™ÂÖ•Âäõ„ÇíË®±ÂèØ„Åô„Çã„Åã„ÇíÊ±∫„ÇÅ„Çãprops
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    }),
  )

  // „Å©„ÅÆ„Ç≥„É≥„ÉÜ„Éä„Å´Â±Ö„Çã„ÅÆ„ÅãÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  const findContainer = (id: number) => {
    // „ÇÇ„Åó„Ç≥„É≥„ÉÜ„Éä„ÅÆ‰∏≠„Å´id„ÅåÁÑ°„ÅÑÊôÇ„Åß„ÇÇitems„ÅÆ‰∏≠„Å´id„Åå„ÅÇ„Çå„Å∞„Åù„Çå„ÇíËøî„Åô
    // „Åì„Çå„Çí„Åó„Å™„ÅÑ„Å®„Éâ„É©„ÉÉ„Ç∞„Åó„Åü„É™„ÇΩ„Éº„Çπ„Åå„Ç≥„É≥„ÉÜ„Éä„ÅÆ‰∏≠„Å´ÁÑ°„ÅÑÊôÇ„Å´„Ç®„É©„Éº„ÅåÂá∫„Çã„ÄÇ
    // „Å©„ÅÜ„ÅÑ„ÅÜÁêÜÂ±à„ÅßÂãï„ÅÑ„Å¶„Çã„ÅÆ„ÅãÁ¢∫ÂÆü„Å´„ÅØ„Çè„Åã„Çâ„Å™„ÅÑ„Åå„ÄÅ
    // ÊÅê„Çâ„Åè„Åì„ÅÆÈñ¢Êï∞„Åß„Ç≥„É≥„ÉÜ„Éä„ÅÆ‰∏≠„Å´id„ÅåÁÑ°„ÅÑÊôÇ„Å´„ÄÅevent.over.id„ÅåÂá∫Âäõ„Åï„Çå„ÇãÊôÇÈñì„ÅåÂ∞ë„ÅóÈÅÖ„Çå„Çã„ÅÆ„Åß
    // „Å®„Çä„ÅÇ„Åà„Åö„ÄÅid„ÇíËøî„Åó„Å¶ÁÑ°Èôê„É´„Éº„Éó„Åï„Åõ„Å¶ÊôÇÈñì„ÇíÁ®º„Åê„Åü„ÇÅ„Å´„ÇÑ„Å£„Å¶„ÅÑ„Çã„Å®ËÄÉ„Åà„Å¶„ÅÑ„Çã„ÄÇ

    if (id in items) {
      return id as unknown as keyof Todos
    }

    const containerKeys = Object.keys(items)
    for (const key of containerKeys) {
      const container = items[key as keyof Todos]
      const foundItem = container.find((item) => item.id === id)
      if (foundItem) {
        return key as keyof Todos
      }
    }
  }

  const findTodoName = (id: number) => {
    const containerKeys = Object.keys(items)
    for (const key of containerKeys) {
      const container = items[key as keyof typeof items]
      const foundItem = container.find((item) => item.id === id)
      if (foundItem) {
        return foundItem.todoName
      }
    }
  }

  // „Éâ„É©„ÉÉ„Ç∞ÈñãÂßãÊôÇ„Å´Áô∫ÁÅ´„Åô„ÇãÈñ¢Êï∞
  const handleDragStart = (event: DragStartEvent) => {
    console.log('üïπ')
    console.log(event)

    const { active } = event
    //„Éâ„É©„ÉÉ„Ç∞„Åó„Åü„É™„ÇΩ„Éº„Çπ„ÅÆid
    const id = active.id
    setActiveId(id as number)
  }

  //„Éâ„É©„ÉÉ„Ç∞ÂèØËÉΩ„Å™„Ç¢„Ç§„ÉÜ„É†„Åå„Éâ„É≠„ÉÉ„ÉóÂèØËÉΩ„Å™„Ç≥„É≥„ÉÜ„Éä„ÅÆ‰∏ä„Å´ÁßªÂãïÊôÇ„Å´Áô∫ÁÅ´„Åô„ÇãÈñ¢Êï∞
  const handleDragOver = (event: DragOverEvent) => {
    const { active, over } = event
    //„Éâ„É©„ÉÉ„Ç∞„Åó„Åü„É™„ÇΩ„Éº„Çπ„ÅÆid
    const id = active.id
    //„Éâ„É≠„ÉÉ„Éó„Åó„ÅüÂ†¥ÊâÄ„Å´„ÅÇ„Å£„Åü„É™„ÇΩ„Éº„Çπ„ÅÆid
    const overId = over?.id

    console.log(event)
    console.log(id)
    console.log('aaa' + over?.id)

    if (!overId) return

    // „Éâ„É©„ÉÉ„Ç∞„ÄÅ„Éâ„É≠„ÉÉ„ÉóÊôÇ„ÅÆ„Ç≥„É≥„ÉÜ„ÉäÂèñÂæó
    // yet,doing,done„ÅÆ„ÅÑ„Åö„Çå„Åã„ÇíÊåÅ„Å§
    const activeContainer = findContainer(id as number)
    const overContainer = findContainer(over?.id as number)

    console.log('activeContainer is' + activeContainer)
    console.log('overContainer is' + overContainer)

    if (!activeContainer || !overContainer || activeContainer === overContainer) {
      // „Ç≥„É≥„ÉÜ„Éä„ÅåÂêå„ÅòÂ†¥Âêà
      console.log('finn')
      return
    }

    // „Ç≥„É≥„ÉÜ„Éä„ÅåÁï∞„Å™„ÇãÂ†¥Âêà
    setItems((prev) => {
      // ÁßªÂãïÂÖÉ„ÅÆ„Ç≥„É≥„ÉÜ„Éä„ÅÆË¶ÅÁ¥†ÈÖçÂàó„ÇíÂèñÂæó
      const activeItems = prev[activeContainer]
      // ÁßªÂãïÂÖà„ÅÆ„Ç≥„É≥„ÉÜ„Éä„ÅÆË¶ÅÁ¥†ÈÖçÂàó„ÇíÂèñÂæó
      const overItems = prev[overContainer]

      // ÈÖçÂàó„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂèñÂæó
      const activeIndex = activeItems.findIndex((item: Todo) => item.id === id)
      const overIndex = overItems.findIndex((item: Todo) => item.id === overId)

      let newIndex
      if (overId in prev[overContainer]) {
        // ‰∏ã‰ª•Â§ñ„ÅÆË¶ÅÁ¥†„Å´„Éâ„É≠„ÉÉ„Éó„Åó„ÅüÂ†¥Âêà
        newIndex = overItems.length + 1
      } else {
        // container„ÅÆÊúÄÂæå„ÅÆË¶ÅÁ¥†„Å´„Éâ„É≠„ÉÉ„Éó„Åó„ÅüÂ†¥Âêà
        const isBelowLastItem = over && overIndex === overItems.length - 1

        const modifier = isBelowLastItem ? 1 : 0

        newIndex = overIndex >= 0 ? overIndex + modifier : overItems.length + 1
      }

      // ÁßªÂãïÂÖÉ„ÅÆÈÖçÂàó„Å®ÁßªÂãïÂÖà„ÅÆÈÖçÂàó„ÅÆÁä∂ÊÖã„ÇíÂèçÊò†„Åó„Åüprev„Çíreturn„Åó„Å¶setItems„Å´Ê∏°„Åô
      return {
        ...prev,
        [activeContainer]: [
          ...prev[activeContainer].filter((item: Todo) => item.id !== active.id),
        ],
        [overContainer]: [
          ...prev[overContainer].slice(0, newIndex),
          items[activeContainer][activeIndex],
          ...prev[overContainer].slice(newIndex, prev[overContainer].length),
        ],
      }
    })
  }

  // „Éâ„É©„ÉÉ„Ç∞ÁµÇ‰∫ÜÊôÇ„Å´Áô∫ÁÅ´„Åô„ÇãÈñ¢Êï∞
  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event
    //„Éâ„É©„ÉÉ„Ç∞„Åó„Åü„É™„ÇΩ„Éº„Çπ„ÅÆid
    const id = active.id
    //„Éâ„É≠„ÉÉ„Éó„Åó„ÅüÂ†¥ÊâÄ„Å´„ÅÇ„Å£„Åü„É™„ÇΩ„Éº„Çπ„ÅÆid
    const overId = over?.id

    if (!overId) return

    // „Éâ„É©„ÉÉ„Ç∞„ÄÅ„Éâ„É≠„ÉÉ„ÉóÊôÇ„ÅÆ„Ç≥„É≥„ÉÜ„ÉäÂèñÂæó
    // yet,doing,done„ÅÆ„ÅÑ„Åö„Çå„Åã„ÇíÊåÅ„Å§
    const activeContainer = findContainer(id as number)
    const overContainer = findContainer(over?.id as number)

    // ÈÖçÂàó„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂèñÂæó
    // ÔºÅ„Éû„Éº„ÇØ„ÅØ„ÄÅnull„ÇÑundefined„ÇíÈô§Â§ñ„Åô„Çã„Åü„ÇÅ„ÅÆÈùûnull„Ç¢„Çµ„Éº„Ç∑„Éß„É≥ÊºîÁÆóÂ≠ê
    const activeIndex = items[activeContainer!].findIndex((item: Todo) => item.id === id)
    const overIndex = items[overContainer!].findIndex((item: Todo) => item.id === overId)

    // „Éâ„É≠„ÉÉ„ÉóÊôÇ„Å´„É™„Çπ„Éà„ÅÆË¶ÅÁ¥†„Çí„Å®„Å£„Åã„Åà„Å≤„Å£„Åã„Åà„ÅÆ„Ç¢„É¨„Ç≥„É¨
    if (activeIndex !== overIndex) {
      setItems((items) => ({
        ...items,
        [overContainer!]: arrayMove(items[overContainer!], activeIndex, overIndex),
      }))
      handleChangePosition(id as number, overContainer!)
    }
    setActiveId(undefined)
  }

  const list1 = items.yet.map((item) => item.id)
  const list2 = items.doing.map((item) => item.id)
  const list3 = items.done.map((item) => item.id)

  console.log(list1)
  console.log(list2)
  console.log(list3)

  // ---------„Åì„Åì„Åã„Çâ„ÅØAPI„ÅÆÂá¶ÁêÜ---------

  const [isLoading, setLoading] = useState(true)
  const [isError, setError] = useState(false)

  const [todoName, setTodoName] = useState('')
  const [todoStatus, setTodoStatus] = useState('yet')

  useEffect(() => {
    fetchData()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const fetchData = async () => {
    try {
      const response = await fetch(`/api/getData`)
      const info = await response.json()
      // setTodoData(() => [...info])
      setItems(() => ({
        yet: info.filter((item: Todo) => item.todoStatus === 'yet'),
        doing: info.filter((item: Todo) => item.todoStatus === 'doing'),
        done: info.filter((item: Todo) => item.todoStatus === 'done'),
      }))
      // object„ÅÆ‰∏≠Ë∫´„ÇíÁ¢∫Ë™ç„Åô„Çã
      console.log('%o', items)
    } catch (err) {
      setError(true)
    } finally {
      setLoading(false)
    }
  }

  const deleteData = async (id: number) => {
    await fetch(`/api/delData?id=${id}`, {
      method: 'GET',
    })
    fetchData()
  }

  // „Éâ„É≠„ÉÉ„Éó„Åó„ÅüÊôÇ„Å´DB„ÅÆtodoStatus„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞
  const handleChangePosition = async (id: number, overContainer: string) => {
    const res = await fetch('/api/addData', {
      method: 'POST',
      body: JSON.stringify({
        id: id,
        todoStatus: overContainer,
      }),
    })
    const result = await res.text()
    console.log(result)
    fetchData()
  }

  // const updateData = async (todo: Todo) => {
  //   await fetch("/api/addData", {
  //     method: "POST",
  //     body: JSON.stringify({
  //       id: todo.id,
  //       todoName: todo.todoName,
  //       todoStatus: todo.todoStatus,
  //     }),
  //   })
  //   fetchData();
  // }

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    const res = await fetch('/api/addData', {
      method: 'POST',
      body: JSON.stringify({
        todoName: todoName,
        todoStatus: todoStatus,
      }),
    })
    const result = await res.text()
    console.log(result)
    fetchData()
    setTodoName('')
    setTodoStatus('yet')
  }

  const handleChangetodoName = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTodoName(e.target.value)
  }

  return (
    <div className='App'>
      <form onSubmit={handleSubmit}>
        <input type='text' onChange={handleChangetodoName} value={todoName} />
        <button type='submit'>submit</button>
      </form>
      <h1>all Data</h1>
      {isLoading ? (
        <div>loading...</div>
      ) : isError ? (
        <div>error</div>
      ) : (
        <main className=''>
          <div className=''>
            <h1 className='issue-title'>ISSUE„É™„Çπ„Éà</h1>
            <div className='issue-container flex justify-center align-middle w-full'>
              <DndContext
                sensors={sensors}
                collisionDetection={closestCorners}
                onDragStart={handleDragStart}
                onDragOver={handleDragOver}
                onDragEnd={handleDragEnd}
              >
                {/* SortableContainer */}

                <SortableContainer
                  id='yet'
                  label='ToDo'
                  items={items.yet}
                  onDelete={deleteData}
                />
                <SortableContainer
                  id='doing'
                  label='Doing'
                  items={items.doing}
                  onDelete={deleteData}
                />
                <SortableContainer
                  id='done'
                  label='Done'
                  items={items.done}
                  onDelete={deleteData}
                />
                {/* DragOverlay */}
                <DragOverlay>
                  {activeId ? (
                    <Item
                      id={activeId as number}
                      findTodoName={findTodoName}
                      findContainer={findContainer}
                    />
                  ) : null}
                </DragOverlay>
              </DndContext>
            </div>
          </div>
        </main>
      )}
    </div>
  )
}

export default App
